@@@@@@@@@@Ruolo delle classi

-pacchetto pizzeriadiddieffe.core

-1 CreateObjectByName:
Classe che implementa l'interfaccia "ItemsCreatorInterface",viene utilizzata per creare i vari oggetti che andranno a comporre un singolo item.Tale elemento puo' essere di tipo pizza,beverage o focaccia.
E' composta da due metodi principali: "createObjectByName",in grado di creare tramite le informazioni contenute nei parametri un oggetto che rappresenta un "caso base" del pattern Decorator;"createToppingByName",la cui funzione e' praticamenta la stessa di "createObjectByName",ad eccezione però,che in questo caso vengono istanziati e restituiti degli oggetti rappresentati i topping del patter Decorator.

2-Item:
Interfaccia che viene implementata da diverse classi del programma,specifica i vari metodi che dovranno essere implementati nelle sottoclassi.Quali "getInfo","getPrice","add","remove".

3-ItemCreatorInterface
Interfaccia che viene implementata dalla classe "CreateObjectByName",specifica i metodi principali che la classe dovra' implementare.Quali "createObjectByName" e "createToppingByName".


4-Order
Classe che implementa l'interfaccia "Item",implementa quindi tutti i metodi descritti in quest'ultima.Al suo interno dichiara inoltre vari campi:"id",che viene utilizzato per differenziare i vari ordini uno dall'altro;"myOrder",una LinkedList utilizzata per immagazzinare tutti gli item che andranno a compore l'ordine considerato.La classe specifica inoltre dei metodi getters e setters per il campo "id",oltre che a due metodi "deleteAll" e "deleteIndex",che rispettivamente,eliminano dalla LinkedList "myOrder" tutti gli item contenuti, oppure l'item che si trova in una certa posizione(che sara' inserita come parametro del metodo).

5-OrderManager
Classe che implementa l'interfaccia "OrderManagerInterface".Utilizza una LinkedList "myOrderList" per gestire i vari ordini che vengono creati a runtime.E' in grado di cercare un ordine all'interno della propria lista o di crearlo in caso di fallimento,tramite il metodo "createOrder".
 

6-Sound
Classe che implementa l'interfaccia "SoundPlayerInterface".Viene utilizzata per creare e riprodurre suoni relativi alla pressione di pulsanti.Dichiara quindi un campo "soundName",che puo' essere impostato piu' volte tramite il metodo "setSound".

7-SoundPlayerInterface
Interfaccia implementata dalla classe "Sound",dichiara due metodi:"setSound",utilizzato per impostare il nome del file audio che verra' riprodotto;"playSound",metodo utilizzato per riprodurre il file precedentemente impostato.

pizzeriadiddieffe.core.pizza/beverage/focaccia

1-Pizza
Classe astratta che viene estesa dalle classi "PizzaDecorator" e da tutti i casi base del pattern("BasicBrownPizza","BasicDoubleWhitePizza","BasicWhitePizza").Implementa l'interfaccia "Item" e dichiara due metodi astratti "getInfo" e "getPrice". 

2-PizzaDecorator
Classe astratta che estende la classe "Pizza",dichiara due metodi astratti "getPrice" e "getInfo",che dovranno quindi essere implementati dalle sottoclassi,inoltre implementa i metodi "add" e "remove" del'interfaccia "Item".


3-BasicWhitePizza
Classe che estende la classe astratta "Pizza",implementando i metodi "getPrice" e "getInfo".Utilizza due campi PRICE e INFO, che specificano rispettivamente il prezzo dell'oggetto corrente e la sua descrizione.
Vengono inoltre implementati i metodi "add" e "remove" dell'interfaccia "Item".Viene considerato come il caso base del pattern Decorator,potra' quindi essere decorato dai vari topping presenti nel pacchetto ".topping" .

pizzadiddieffe.core.pizza.topping

1-Anchovy
Classe che estende PizzaDecorator,fa uso dei metodi "getInfo" e "getPrice" per decorare l'oggetto tempPizza.Quest'ultimo viene passato come parametro al costruttore della classe.Viene utilizzato come topping del pattern Decorator,e' quindi sufficente impostare come "tempPizza" una qualunque classe che estende la classe astratta "Pizza",al fine di arricchirla con le informazioni della classe Anchovy.







pizzeriadiddieffe.gui.jpanel.japanelwithbackground

1-JPanelWithBackgroundImgAndBackBtn
Classe che estende "JPanel” arricchendo il pannello con un immagine di  e il pulsante “Back” posizionato in alto a sinistra. L’immagine di sfondo viene passata tramite una String che ne indica l’indirizzo. La classe stessa cerca e crea l’immagine come Image, gli setta le dimensioni e la imposta come sfondo del pannello sovrascrivendo il metodo “paintComponent” disegnando l’immagine appena creata.
Il metodo “paintBackButton()” aggiunge il pulsante “Back” in alto a sinistra di ogni pannello creando un “ClickableButtonWithImage”. Quando esso viene premuto viene reso visibile il pannello precedente tramite il metodo “setPanelVisibility()”.
Quest’ultimo setta visibile il penultimo pannello visibile tramite la “ComponentsGetter()”.

2-JPanelWithBackgroundOrder
La classe estende “JPanelWithBackgroundImgAndBackBtn” inserendo nel mezzo del pannello 4 pulsanti di scelta per l’utente: -Beverage, -Pizza, -Focaccia, -Order tramite “drawChoiceButtons()”. In questa classe vengono passate tutte le informazioni per creare i pannelli successivi dove verranno creati gli ordini. 
Quindi il metodo “createOrderViewerPanel()” viene chiamato se l’utente preme su -Order e viene creato un oggetto “OrderViewer” e poi reso visibile il pannello che fa visualizzare l’ordine del tavolo.
Il metodo “createOrderingPanels()” viene invocato se l’utente preme uno dei tre -Pizza, -Focaccia, -Beverage e viene creato il pannello con tutte le scelte da ordinare in base a cosa viene passato come stringa. Queste stringhe conteranno la lista di tutte le componenti basi e topping dell’articolo scelto, compresi indirizzi delle immagini e nome delle classi ai quali appartengono.
Il “createOrderingPanel()” crea il singolo pannello passando tutti i parametri stringhe di cui parlavo prima. 
“setTableId()” setta l’id del tavolo per cercare l’ordine corrente.

3-JPanelWithBackgroundTables
Classe che estende “JPanelWithBackgroundImgAndBackBtn” inserendo il numero dei tavoli scelti all’inizio dell’applicazioni all’interno del pannello tramite il metodo “drawTables()”. Ogni tavolo sarà un pulsante e renderà visibile un altro pannello passandogli l’Id del tavolo. 
Il metodo “getCoordinates()” è stato implementato per rendere la grandezza e la posizione dei tavoli più intelligente in base al numero dei tavoli scelti inizialmente. 

4-JPanelWithImageOrderInterface
Interfaccia contente il metodo “setTableId(String s)” che andrà a impostare l’Id per il tavolo corrente.

5-JPanelWithImageInterface
Interfaccia … 


pizzeriadiddieffe.gui.jbutton

1-ClickableButtonWithImage
La classe estende JButton aggiungendo come sfondo un immagine che viene passata tramite String, oltre alle dimensioni  e alla posizione del button. Il pulsante ha le proprietà di cambiare immagine quando gli si passa sopra con il cursore e quando ci clicchiamo sopra. 

2-JButtonTextImage
Estende “ClickableButtonWithImage” e imposta il colore del testo del button in base al button creato in modo da rendere il testo più leggibile.



pizzeriadiddieffe.gui.jpanel

1-JPanelWithBackBtn
La classe estende JPanel arricchendo il pannello con il pulsante “Back” in alto a sinistra. Questo viene implementato tramite il metodo “paintBackBtn()” che aggiunge il button. Il metodo “setPanelVisibility()” fa in modo che una volta premuto il pulsante “Back” esse ritorni al penultimo pannello visibile.

2-OrderingJPanel
La classe estende JPanelWithBackgroundImgAndBackBtn quindi oltre ad essere un pannello con sfondo e pulsante “Back” esso crea tutti i componenti per comporre l’ordine. 
Riceve in ingresso le stringhe con i componenti da visualizzare (nomi casi base, nomi toppings, e relativi nomi delle classi). 
Il metodo “createBaseItems()” crea i button dei casi base aggiungendo all’ActionListener anche la possibilità di cambiare colore del bordo di ogni pulsante in modo che se si trova selezionato avrà un colore se invece non è selezionato avrà un colore diverso.
Il metodo “createToppingsItems()” fa la stessa cosa del metodo appena descritto ma per i Toppings che verranno resi attivi solo se viene selezionato un caso base.
“addOrderButton()” fa visualizzare il pulsante per completare l’ordine e fa emettere un suono a ordine completato. Aggiunge anche un pulsante “Clear” che serve per deselezionare tutti i componenti selezionati per l’ordine in corso richiamando “resetSelection()”.

3-OrderScrollPane
La classe estende JScrollPane che non è altro che un pannello con la possibilità di scorrerlo qualora non entrassero tutti i suoi componenti. Viene usato nell’OrderingJpanel in modo che se vengono aggiunti un giorno tanti elementi non visibili nel pannello questo si abilita e fa scorrere il panel e nell’OrderViewer per visualizzare tutti gli ordini effettuati nel tavolo. 

4-PayOrderJPanel
Estende JPanelWithBackgroundImgAndBackBtn inserendo all’interno del pannello la scelta per il metodo di pagamento (Cash, Bancomat, Mobile). 
“PayOrderJPanel()” setta le dimensione e la posizione dei pulsanti che poi vengono creati da “createPayButton()”. “createPayPanel()” crea il pannello in base al tipo di pagamento selezionato tramite “getStrategy()”.

5-ScrollPaneInterface
Interfaccia per la classe OrderingJPanel.











