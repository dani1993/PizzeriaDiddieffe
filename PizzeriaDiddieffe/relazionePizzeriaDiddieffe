@@@@@@@@@@Ruolo delle classi

pizzeriadiddieffe.core

1- CreateObjectByName:
	Classe che implementa l'interfaccia "ItemsCreatorInterface", viene utilizzata per creare i vari oggetti che andranno a comporre un singolo item. Tale elemento puo' essere di tipo pizza, beverage o focaccia.
	E' composta da due metodi principali: "createObjectByName", in grado di creare tramite le informazioni contenute nei parametri un oggetto che rappresenta un "caso base" del pattern Decorator; "createToppingByName", la cui funzione e' praticamenta la stessa di "createObjectByName", ad eccezione pero',che in questo caso vengono istanziati e restituiti degli oggetti rappresentati i topping del patter Decorator.

2- Item:
	Interfaccia che viene implementata da diverse classi del programma, specifica i vari metodi che dovranno essere implementati nelle sottoclassi. Quali "getInfo", "getPrice", "add", "remove".

3- ItemCreatorInterface
	Interfaccia che viene implementata dalla classe "CreateObjectByName", specifica i metodi principali che la classe dovra' implementare. Quali "createObjectByName" e "createToppingByName".

4- Order
	Classe che implementa l'interfaccia "Item", implementa quindi tutti i metodi descritti in quest'ultima. Al suo interno dichiara inoltre vari campi: "id", che viene utilizzato per differenziare i vari ordini uno dall'altro; "myOrder", una LinkedList utilizzata per immagazzinare tutti gli item che andranno a compore l'ordine considerato. La classe specifica inoltre dei metodi getters e setters per il campo "id", oltre che a due metodi "deleteAll" e "deleteIndex" che, rispettivamente, eliminano dalla LinkedList "myOrder" tutti gli item contenuti, oppure l'item che si trova in una certa posizione(che sara' inserita come parametro del metodo).

5- OrderManager
	Classe che implementa l'interfaccia "OrderManagerInterface". Utilizza una LinkedList "myOrderList" per gestire i vari ordini che vengono creati a runtime. E' in grado di cercare un ordine all'interno della propria lista o di crearlo in caso di fallimento, tramite il metodo "createOrder".

6- Sound
	Classe che implementa l'interfaccia "SoundPlayerInterface". Viene utilizzata per creare e riprodurre suoni relativi alla pressione di pulsanti. Dichiara quindi un campo "soundName", che puo' essere impostato piu' volte tramite il metodo "setSound".

7- SoundPlayerInterface
	Interfaccia implementata dalla classe "Sound", dichiara due metodi: "setSound", utilizzato per impostare il nome del file audio che verra' riprodotto; "playSound", metodo utilizzato per riprodurre il file precedentemente impostato.


pizzeriadiddieffe.core.pizza/beverage/focaccia

1- Pizza
	Classe astratta che viene estesa dalle classi "PizzaDecorator" e da tutti i casi base del pattern("BasicBrownPizza", "BasicDoubleWhitePizza", "BasicWhitePizza"). Implementa l'interfaccia "Item" e dichiara due metodi astratti "getInfo" e "getPrice". 

2- PizzaDecorator
	Classe astratta che estende la classe "Pizza", dichiara due metodi astratti "getPrice" e "getInfo", che dovranno quindi essere implementati dalle sottoclassi, inoltre implementa i metodi "add" e "remove" del'interfaccia "Item".

3- BasicWhitePizza
	Classe che estende la classe astratta "Pizza", implementando i metodi "getPrice" e "getInfo". Utilizza due campi PRICE e INFO, che specificano rispettivamente il prezzo dell'oggetto corrente e la sua descrizione.
	Vengono inoltre implementati i metodi "add" e "remove" dell'interfaccia "Item". Viene considerato come il caso base del pattern Decorator, potra' quindi essere decorato dai vari topping presenti nel pacchetto ".topping" .


pizzadiddieffe.core.pizza.topping

1- Anchovy
	Classe che estende PizzaDecorator, fa uso dei metodi "getInfo" e "getPrice" per decorare l'oggetto tempPizza. Quest'ultimo viene passato come parametro al costruttore della classe. Viene utilizzato come topping del pattern Decorator, e' quindi sufficente impostare come "tempPizza" una qualunque classe che estende la classe astratta "Pizza", al fine di arricchirla con le informazioni della classe Anchovy.




pizzeriadiddieffe.gui.jpanel.japanelwithbackground

1- JPanelWithBackgroundImgAndBackBtn
	Classe che estende "JPanel" arricchendo il pannello con un immagine di e il pulsante "Back" posizionato in alto a sinistra. L'immagine di sfondo viene passata tramite una String che ne indica l'indirizzo. La classe stessa cerca e crea l'immagine come Image, gli setta le dimensioni e la imposta come sfondo del pannello sovrascrivendo il metodo "paintComponent" disegnando l'immagine appena creata.
	Il metodo "paintBackButton()" aggiunge il pulsante "Back" in alto a sinistra di ogni pannello creando un "ClickableButtonWithImage". Quando esso viene premuto viene reso visibile il pannello precedente tramite il metodo "setPanelVisibility()".
	Quest'ultimo setta visibile il penultimo pannello visibile tramite la "ComponentsGetter()".

2- JPanelWithBackgroundOrder
	La classe estende "JPanelWithBackgroundImgAndBackBtn" inserendo nel mezzo del pannello 4 pulsanti di scelta per l'utente: -Beverage, -Pizza, -Focaccia, -Order tramite "drawChoiceButtons()". In questa classe vengono passate tutte le informazioni per creare i pannelli successivi dove verranno creati gli ordini.
	Quindi il metodo "createOrderViewerPanel()" viene chiamato se l'utente preme su -Order e viene creato un oggetto "OrderViewer" e poi reso visibile il pannello che fa visualizzare l'ordine del tavolo.
	Il metodo "createOrderingPanels()" viene invocato se l'utente preme uno dei tre -Pizza, -Focaccia, -Beverage e viene creato il pannello con tutte le scelte da ordinare in base a cosa viene passato come stringa. Queste stringhe conteranno la lista di tutte le componenti basi e topping dell'articolo scelto, compresi indirizzi delle immagini e nome delle classi ai quali appartengono.
	Il "createOrderingPanel()" crea il singolo pannello passando tutti i parametri stringhe di cui parlavo prima. 
	"setTableId()" setta l'id del tavolo per cercare l'ordine corrente.

3- JPanelWithBackgroundTables
	Classe che estende "JPanelWithBackgroundImgAndBackBtn" inserendo il numero dei tavoli scelti all'inizio dell'applicazione all'interno del pannello tramite il metodo "drawTables()". Ogni tavolo sara' un pulsante e rendera' visibile un altro pannello passandogli l'Id del tavolo. 
	Il metodo "getCoordinates()" e' stato implementato per rendere la grandezza e la posizione dei tavoli piu' intelligente in base al numero dei tavoli scelti inizialmente. 

4- JPanelWithImageOrderInterface
	Interfaccia contente il metodo "setTableId(String s)" che andra' a impostare l'Id per il tavolo corrente.

5- JPanelWithImageInterface
	Interfaccia. 


pizzeriadiddieffe.gui.jbutton

1- ClickableButtonWithImage
	La classe estende JButton aggiungendo come sfondo un immagine che viene passata tramite String, oltre alle dimensioni e alla posizione del button. Il pulsante ha le proprieta' di cambiare immagine quando gli si passa sopra con il cursore e quando ci clicchiamo sopra. 

2- JButtonTextImage
	Estende "ClickableButtonWithImage" e imposta il colore del testo del button in base al button creato in modo da rendere il testo piu' leggibile.


pizzeriadiddieffe.gui.jpanel

1- JPanelWithBackBtn
	La classe estende JPanel arricchendo il pannello con il pulsante "Back" in alto a sinistra. Questo viene implementato tramite il metodo "paintBackBtn()" che aggiunge il button. Il metodo "setPanelVisibility()" fa in modo che una volta premuto il pulsante "Back" esse ritorni al penultimo pannello visibile.

2- OrderingJPanel
	La classe estende JPanelWithBackgroundImgAndBackBtn quindi oltre ad essere un pannello con sfondo e pulsante "Back" esso crea tutti i componenti per comporre l'ordine. 
	Riceve in ingresso le stringhe con i componenti da visualizzare (nomi casi base, nomi toppings, e relativi nomi delle classi). 
	Il metodo "createBaseItems()" crea i button dei casi base aggiungendo all'ActionListener anche la possibilita' di cambiare colore del bordo di ogni pulsante in modo che se si trova selezionato avra' un colore se invece non e' selezionato avra' un colore diverso.
	Il metodo "createToppingsItems()" fa la stessa cosa del metodo appena descritto ma per i Toppings che verranno resi attivi solo se viene selezionato un caso base.
	"addOrderButton()" fa visualizzare il pulsante per completare l'ordine e fa emettere un suono a ordine completato. Aggiunge anche un pulsante "Clear" che serve per deselezionare tutti i componenti selezionati per l'ordine in corso richiamando "resetSelection()".

3- OrderScrollPane
	La classe estende JScrollPane che non e' altro che un pannello con la possibilita' di scorrerlo qualora non entrassero tutti i suoi componenti. Viene usato nell'OrderingJpanel in modo che se vengono aggiunti un giorno tanti elementi non visibili nel pannello questo si abilita e fa scorrere il panel e nell'OrderViewer per visualizzare tutti gli ordini effettuati nel tavolo. 

4- PayOrderJPanel
	Estende JPanelWithBackgroundImgAndBackBtn inserendo all'interno del pannello la scelta per il metodo di pagamento (Cash, Bancomat, Mobile).
	"PayOrderJPanel()" setta le dimensione e la posizione dei pulsanti che poi vengono creati da "createPayButton()". "createPayPanel()" crea il pannello in base al tipo di pagamento selezionato tramite "getStrategy()".

5- ScrollPaneInterface
	Interfaccia per la classe OrderingJPanel.


pizzeriadiddieffe.gui.formattedelements

1- ButtonBorderManager
	Classe che implementa “ButtonBorderManagerInterface”.
	Il metodo “getBorderColor(JButtonTextImage currentItemButton)” restituisce il colore del bordo del JButtonTextImage passato al metodo.	
	Il metodo “changeBorderColor(JButtonTextImage currentItemButton)” assegna al bordo del JButtonTextImage passato al metodo il colore desiderato.
	Il metodo “resetBorderColor(JButton currentButton)” resetta il colore del bordo del JButton passato al metodo al colore di default.
	Il metodo “setOthersButtons(boolean enable, LinkedList<JButton> list, JButton myButton)” data una lista di JButton, un singolo JButton e un valore booleano, agisce sui JButton della lista attivandoli. 
	Il metodo “getButtonListIterator(LinkedList<JButton> list)” restituisce l'iteratore della lista passata al metodo.
	Il metodo “resetButtons(LinkedList<JButton> baseCasesButtonsList, LinkedList<JButton> toppingButtonList)” resetta le liste di JButton passate al metodo.
	Il metodo “resetListButtons(Iterator<JButton> iterator)” resetta il colore del bordo dei JButton della lista passata al metodo.

2- ButtonBorderManagerInterface
	Interfaccia contenete i metodi “getBorderColor(JButtonTextImage currentItemButton)”, che restituisce il colore del bordo del JButtonTextImage passato al metodo, “changeBorderColor(JButtonTextImage currentItemButton)”, che setta il colore del bordo del JButtonTextImage passato,
	“setOthersButtons(boolean enable, LinkedList<JButton> list, JButton myButton)”, che data una lista di JButton, un singolo JButton e un valore booleano, agisce sui JButton della lista attivandoli, e “resetButtons(LinkedList<JButton> baseCasesButtonList, LinkedList<JButton> toppingButtonList)”, che resetta le liste di JButton passate al metodo.

3- FormattedButton
	Classe che implementa “ComponentFormatterInterface”.
	Il metodo “setComponentProp(int x, int y, int width, int height)” setta le impostazioni del JButton assegnato alla variabile nella classe.
	Il metodo “setComponentTextProp(String text, String font, int fontSize, Color textColor)” setta le impostazioni del testo del JButton assegnato alla variabile nella classe.
	Il metodo “createNewComponent()” crea un JButton e lo assegna alla variabile della classe.
	Il metodo “getFormattedComponent()” restituisce il JButton creato nella classe.

4- FormattedComboBox
	Classe che implementa “ComponentFormatterInterface”.
	Il metodo “setComponentProp(int x, int y, int width, int height)” setta le impostazioni del JComboBox assegnato alla variabile nella classe.
	Il metodo “setComponentTextProp(String text, String font, int fontSize, Color textColor)” setta le impostazioni del testo del JComboBox assegnato alla variabile nella classe.
	Il metodo “createNewComponent()” crea un JComboBox e lo assegna alla variabile della classe.
	Il metodo “getFormattedComponent()” restituisce il JComboBox creato nella classe.

5- FormattedLabel
	Classe che implementa “ComponentFormatterInterface”.
	Il metodo “setComponentProp(int x, int y, int width, int height)” setta le impostazioni del JLabel assegnato alla variabile nella classe.
	Il metodo “setComponentTextProp(String text, String font, int fontSize, Color textColor)” setta le impostazioni del testo del JLabel assegnato alla variabile nella classe.
	Il metodo “createNewComponent()” crea un JLabel e lo assegna alla variabile della classe.
	Il metodo “getFormattedComponent()” restituisce il JLabel creato nella classe.

6- HtmlFormatter
	Classe che implementa “HtmlFormatterInterface” ed ogni metodo restituisce l'elemento di formattazione in HTML assegnati alle variabili corrispondenti.

7- HtmlFormatterInterface
	Interfaccia contenente i metodi “getBullet()”, “getComma()”, “getTabSpace()”, “getEndItalic()”, “getNewLine()”, “getStartBold()”, “getEndBold()”, “getPrice()”, “getHighligh()” e “getEndhighligh()”, che restituiscono elementi di formattazione del testo in HTML.


pizzeriadiddieffe.gui.paymethods

1- BancomatPayMethod
	Classe che estende “JpanelWithBackBtn” ed implementa “payMethodInterface”.
	Il metodo “createTotalLabel()” crea una JLabel, nella quale c'e' una stringa di testo predefinita “Amount to Pay” piu' l'importo totale dell'ordine.
	Inoltre il metodo crea un JButton “Pay” al quale viene aggiunto un ActionListener per cui, se il codice inserito dall'utente e' minore di 5 cifre alla pressione il testo del JButton viene settato a “Insert Code”, altrimenti viene settato a “Payed!” e l'ordine viene svuotato.
	Il metodo “createButtons()” crea invece una JLabel che ha come stringa “Insert Code ”, crea poi 10 JButton(numeri da 0 a 10), che vengono disposti richiamando il metodo “setCordinates(int i)”, ai quali viene aggiunto un ActionListener per cui alla pressione di uno di questi JButton viene inserito un asterisco nella JLabel.
	Viene infine creato un JButton “C” che, se premuto, azzera il codice inserito.

2- CashPayment
	Classe che estende “JpanelWithBackBtn” ed implementa “payMethodInterface”.
	Il metodo “createTotalLabel()” crea una JLabel, nella quale c'e' una stringa di testo predefinita “Amount to Pay” piu' l'importo totale dell'ordine.
	Inoltre il metodo crea un JButton “Pay” al quale viene aggiunto un ActionListener per cui, se quando viene premuto il resto(cioe' la differenza tra l'importo totale dell'ordine e quello inserito dall'utente) e' maggore di 0 o il testo del JButton e' uguale a “Pay” setta il testo del JButton a “Change: ” piu' il resto, altrimenti setta il test del JButton a “Payed!” e svuota l'ordine.
	Il metodo “createButtons()” crea invece una JLabel che ha come stringa “Amount Paid ”, crea poi 10 JButton(numeri da 0 a 10), che vengono disposti richiamando il metodo “setCordinates(int i)”, ai quali viene aggiunto un ActionListener per cui alla pressione di uno di questi JButton viene inserito nella JLabel l'intero corrispondente al testo del JButton premuto ricavato attraverso il “parseInt(String text)”.
	Vengono infine creati due JButton “C” e “.” che, se premuti, rispettivamente azzerano la parte di JLabel inserita dall'utente e inseriscono un “.” nella JLabel.

3- MobilePayMethod
	Classe che estende “JpanelWithBackBtn” ed implementa “payMethodInterface”.
	Il metodo “createBox()” crea due JComboBox inizialmente vuote, alla prima vengono aggiunte le scelte “Contact Less” e “Code Insertion” richiamando il metodo “createMenuItems(JComboBox<String> currentMenu, String[] itemsName)”, alla seconda vengono invece aggiunte le scelte "Apple Pay", "Android Pay" e "Generic Operator" richiamando il metodo “createMenuItems”.
	Il metodo “createTotalLabel()” crea una JLabel, nella quale c'e' una stringa di testo predefinita “Amount to Pay” piu' l'importo totale dell'ordine.
	Crea poi altre due JLabel: la prima, “Choose Autentication Method”, posizionata sopra la prima JComboBox; la seconda, “Choose Operator”, posiziona sopra la seconda JComboBox.
	Infine il metodo crea un JButton “Pay” al quale viene aggiunto un ActionListener per cui, se quando viene premuto il testo del JButton e' uguale a “Pay” setta il testo del JButton a “Autentication” e disabilita le due JComboBox, mentre se il testo del JButton e' uguale ad “Autentication” setta il test del JButton a “Payed!”, disabilita il JButton e svuota l'ordine.

4- PayMethodInterface
	Interfaccia contenente il metodo “payMethod(Order totPrice, JPanelWithBackgroundImgAndBackBtn myPanel)”, che setta l'ordine ed il pannello correnti.